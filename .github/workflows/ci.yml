name: Cross-Platform CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: windows-latest
            cc: cl
            cxx: cl
          - os: macos-latest
            cc: clang
            cxx: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Create metadata files
        run: |
          echo "Quadratic equation solver" > $GITHUB_WORKSPACE/DESCRIPTION
          echo "MIT License" > $GITHUB_WORKSPACE/LICENSE.txt
          echo "# Solver Application" > $GITHUB_WORKSPACE/README.md
          echo "Change log" > $GITHUB_WORKSPACE/ChangeLog.md

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y rpm

      - name: Configure CMake
        run: cmake -B _build -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_C_COMPILER=${{ matrix.cc }}

      - name: Build project
        run: cmake --build _build --parallel

      - name: Run tests
        run: |
          if [ "$RUNNER_OS" != "Windows" ]; then
            echo "1 -5 6" | _build/solver_application/solver_app
            _build/hello_world_application/hello_world
          else
            echo "Skipping interactive tests on Windows"
          fi

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: _build/
          retention-days: 1

  create-packages:
    name: Create Packages
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Create metadata files
        run: |
          echo "Quadratic equation solver" > $GITHUB_WORKSPACE/DESCRIPTION
          echo "MIT License" > $GITHUB_WORKSPACE/LICENSE.txt
          echo "# Solver Application" > $GITHUB_WORKSPACE/README.md
          echo "Change log" > $GITHUB_WORKSPACE/ChangeLog.md

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y rpm

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: _build/

      - name: Copy metadata to build dir
        run: |
          cp $GITHUB_WORKSPACE/DESCRIPTION _build/
          cp $GITHUB_WORKSPACE/LICENSE.txt _build/
          cp $GITHUB_WORKSPACE/README.md _build/
          cp $GITHUB_WORKSPACE/ChangeLog.md _build/

      - name: Generate packages
        run: |
          cd _build/
          mkdir -p _artifacts
          
          if [ "$RUNNER_OS" = "Linux" ]; then
            echo "Generating Linux packages..."
            cpack --config CPackSourceConfig.cmake -G "TGZ;ZIP"
            cpack -G "DEB"
            cpack -G "RPM"
            mv *.tar.gz *.zip *.deb *.rpm _artifacts/
          elif [ "$RUNNER_OS" = "Windows" ]; then
            echo "Generating Windows packages..."
            cpack -G "NSIS"
            cpack -G "WIX"
            move *.exe *.msi _artifacts
          elif [ "$RUNNER_OS" = "macOS" ]; then
            echo "Generating macOS packages..."
            cpack -G "DragNDrop"
            mv *.dmg _artifacts/
          fi
          
          echo "Generated packages:"
          ls -la _artifacts/

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os }}
          path: _build/_artifacts/
          retention-days: 1

  create-release:
    name: Create Release
    needs: create-packages
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "Using version: ${version}"

      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: packages-*
          merge-multiple: true

      - name: Verify packages
        run: |
          echo "Package contents:"
          find release -type f -exec ls -lh {} \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "Solver v${{ env.VERSION }}"
          body: |
            ## Solver Application v${{ env.VERSION }}

            ### Packages included:
            - Linux: DEB, RPM, TGZ, ZIP
            - Windows: MSI, EXE
            - macOS: DMG
          files: |
            release/**/*
          draft: false
          prerelease: false
