name: Cross-Platform CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Create metadata files
        run: |
          echo "Quadratic equation solver" > DESCRIPTION
          echo "MIT License" > LICENSE.txt
          echo "# Solver Application" > README.md

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y rpm

      - name: Configure CMake
        run: cmake -B _build -DCPACK_PACKAGE_ICON=""

      - name: Build project
        run: cmake --build _build --parallel

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "1 -5 6" | _build/solver_application/solver_app
          _build/hello_world_application/hello_world

      - name: Package project
        shell: bash
        run: |
          cd _build/
          version=${GITHUB_REF#refs/tags/v}
          
          if [ "$RUNNER_OS" = "Linux" ]; then
            cpack --config CPackConfig.cmake -G "DEB;RPM"
            cpack --config CPackSourceConfig.cmake -G "TGZ;ZIP"
            mkdir -p artifacts
            mv *.deb *.rpm *.tar.gz *.zip artifacts/
          elif [ "$RUNNER_OS" = "Windows" ]; then
            cpack --config CPackSourceConfig.cmake -G "ZIP"
            mkdir -p artifacts
            mv *.zip artifacts/
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cpack --config CPackSourceConfig.cmake -G "TGZ"
            mkdir -p artifacts
            mv *.tar.gz artifacts/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os }}
          path: _build/artifacts/
          retention-days: 1

  create-release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: release-packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: "Solver v${{ env.VERSION }}"
          body: |
            ## Solver Application v${{ env.VERSION }}

            ### Packages included:
            - Linux: DEB, RPM, TGZ, ZIP
            - Windows: ZIP
            - macOS: TGZ
          files: |
            release-packages/packages-ubuntu-latest/*
            release-packages/packages-windows-latest/*
            release-packages/packages-macos-latest/*
          draft: false
          prerelease: false
